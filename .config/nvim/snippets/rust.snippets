snippet resp "Response at the end of endpoint"
    let obj = json!(
        {
            "message": "$1"
        }
    );

    return Ok(
        HttpResponse::$2()
              .json(obj)
    );

snippet serr "Return standard error"
  return Err(Errors::standard(
      $1,
      "$2",
      StatusCode::$3,
  ));

snippet dpr "Debug print"
  println!("{:?}",$1);

snippet pln "Print line"
  println!("{}",$1);

snippet sch "Struct with derieve"
  #[derive(Validate, Serialize, Deserialize)]
  pub struct $1 {
      // #[validate(length(min = 8, max = 32))]
      item: String,
  }

snippet imps "Basic imports for actix"
  use crate::types::*;

  use actix_web::{
      http::StatusCode,
      web::{Data, Form},
      HttpResponse,
  };
  use redis::AsyncCommands;
  use serde::{Deserialize, Serialize};
  use serde_json::json;
  use sqlx::PgPool;
  use validator::Validate;

snippet endp "Actix web endpoint"
  pub async fn $1(
      db_pool: Data<PgPool>,
      mail_client: Data<Mailer>,
      redis_pool: Data<RedisPool>,
      configs: Data<Settings>,
  ) -> Response {
      $3
  
      let obj = json!(
          {
              "message": ""
          }
      );
  
      return Ok(
          HttpResponse::$2()
                .json(obj)
      );
      
  }

snippet sel "Select query sqlx"
    let $1 = sqlx::query!(
        "SELECT id, is_verified, is_active FROM users WHERE email=$1",
        &form_data.email
    )
    .fetch_optional(db_pool.as_ref())
    .await?;
